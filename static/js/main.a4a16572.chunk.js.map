{"version":3,"sources":["Cell.js","Board.js","App.js","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAroundMe","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","i","nrows","row","j","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","y","x","flipCell","every","cell","setState","tblBoard","key","flipCellsAround","makeTable","defaultProps","App","ReactDOM","render","document","getElementById"],"mappings":"+TAsCeA,G,kBApBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,yEAMPC,GACVC,KAAKJ,MAAMK,sB,+BAIX,IAAIC,EAAU,QAAUF,KAAKJ,MAAMO,MAAQ,YAAc,IAEzD,OACI,wBAAIC,UAAWF,EAASG,QAASL,KAAKH,kB,GAf3BS,cCZbC,G,kBAOJ,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KACDY,MAAQ,CACXC,QAAQ,EACRC,MAAO,EAAKC,eAJG,E,2EAWjB,IADA,IAAID,EAAQ,GACHE,EAAI,EAAGA,EAAIZ,KAAKJ,MAAMiB,MAAOD,IAAK,CAEzC,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAIf,KAAKJ,MAAMoB,MAAOD,IACpCD,EAAIG,KAAKC,KAAKC,SAAWnB,KAAKJ,MAAMwB,qBAEtCV,EAAMO,KAAKH,GAEb,OAAOJ,I,sCAIOW,GAAQ,IAAD,EACErB,KAAKJ,MAAtBoB,EADe,EACfA,MAAOH,EADQ,EACRA,MACTH,EAAQV,KAAKQ,MAAME,MAFF,EAGRW,EAAMC,MAAM,KAAKC,IAAIC,QAHb,mBAGhBC,EAHgB,KAGbC,EAHa,KAKrB,SAASC,EAASF,EAAGC,GAGfA,GAAK,GAAKA,EAAIV,GAASS,GAAK,GAAKA,EAAIZ,IACvCH,EAAMe,GAAGC,IAAMhB,EAAMe,GAAGC,IAK5BC,EAASF,EAAGC,GACZC,EAASF,EAAGC,EAAI,GAChBC,EAASF,EAAGC,EAAI,GAChBC,EAASF,EAAI,EAAGC,GAChBC,EAASF,EAAI,EAAGC,GAGhB,IAAIjB,EAASC,EAAMkB,OAAM,SAAAd,GAAG,OAAIA,EAAIc,OAAM,SAAAC,GAAI,OAAKA,QAEnD7B,KAAK8B,SAAS,CAAEpB,MAAOA,EAAOD,OAAQA,M,kCAKtC,IAFW,IAAD,OACNsB,EAAW,GACNN,EAAI,EAAGA,EAAIzB,KAAKJ,MAAMiB,MAAOY,IAAK,CAEzC,IADA,IAAIX,EAAM,GAD+B,WAEhCY,GACP,IAAIL,EAAK,UAAMI,EAAN,YAAWC,GACpBZ,EAAIG,KACF,kBAAC,EAAD,CACEe,IAAKX,EACLlB,MAAO,EAAKK,MAAME,MAAMe,GAAGC,GAC3BzB,kBAAmB,kBAAM,EAAKgC,gBAAgBZ,QAN3CK,EAAI,EAAGA,EAAI1B,KAAKJ,MAAMoB,MAAOU,IAAM,EAAnCA,GAUTK,EAASd,KAAK,wBAAIe,IAAKP,GAAIX,IAE7B,OACE,2BAAOV,UAAU,SACf,+BAAQ2B,M,+BAOZ,OACE,6BACG/B,KAAKQ,MAAMC,OACV,yBAAKL,UAAU,UACb,0BAAMA,UAAU,eAAhB,OACA,0BAAMA,UAAU,aAAhB,SAGA,6BACE,yBAAKA,UAAU,eACb,yBAAKA,UAAU,eAAf,UACA,yBAAKA,UAAU,aAAf,QAEDJ,KAAKkC,kB,GA7FA5B,cAAdC,EACG4B,aAAe,CACpBtB,MAAO,EACPG,MAAO,EACPI,oBAAqB,KAiGVb,QC1FA6B,G,uLARX,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,W,GAJUE,cCDlB+B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a4a16572.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  // call up to the board to flip cells around this cell\n  handleClick(evt) {\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: .25\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n  }\n\n  /** creates a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    for (let i = 0; i < this.props.nrows; i++) {\n      let row = []\n      for (let j = 0; j < this.props.ncols; j++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row)\n    }\n    return board\n  }\n\n  /** handles changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n\n      /** if this coord is actually on board, flip it */\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    /** flip this cell and the cells around it */\n    flipCell(y, x); //Flip initial cell\n    flipCell(y, x - 1); //flip left\n    flipCell(y, x + 1); //flip right\n    flipCell(y - 1, x); //flip below\n    flipCell(y + 1, x); //flip above\n\n    // win when every cell is turned off\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n  makeTable() {\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className='Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  }\n\n  /** Render game board or winning message. */\n  render() {\n    return (\n      <div>\n        {this.state.hasWon ? (\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n          </div>\n        ) : (\n            <div>\n              <div className='Board-title'>\n                <div className='neon-orange'>Lights</div>\n                <div className='neon-blue'>Out</div>\n              </div>\n              {this.makeTable()}\n            </div>\n          )}\n      </div>\n    )\n  }\n}\n\nexport default Board;","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}